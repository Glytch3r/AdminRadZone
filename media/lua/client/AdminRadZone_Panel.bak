
--client folder
--AdminRadZone_Panel.lua
require "ISUI/ISPanel"

AdminRadZone = AdminRadZone or {}
AdminRadZonePanel = ISPanel:derive("AdminRadZonePanel")
--[[ 
AdminRadZonePanel.TogglePanel()
 ]]
--[[ 
AdminRadZone.isRadZonePaused()
AdminRadZone.isRadZoneReady()
AdminRadZone.isRadZoneActive()
AdminRadZone.isRadZoneCooldown()
 ]]


function AdminRadZonePanel.ClosePanel()
    if AdminRadZonePanel.instance then
        AdminRadZonePanel.instance:setVisible(false)
        AdminRadZonePanel.instance:removeFromUIManager()
        AdminRadZonePanel.instance = nil
    end
end

function AdminRadZonePanel.OpenPanel()
    if AdminRadZonePanel.instance == nil then
        if AdminRadZone.shouldInit() then
            AdminRadZone = AdminRadZone.initData()
        end
        if AdminRadZone.marker and not AdminRadZoneData.active then
            AdminRadZone.marker:remove()
            AdminRadZone.marker = nil
        end

        local x = getCore():getScreenWidth() / 3
        local y = getCore():getScreenHeight() / 2 - 200
        local w = 290
        local h = 340
        AdminRadZonePanel.instance = AdminRadZonePanel:new(x, y, w, h)
        AdminRadZonePanel.instance:initialise()
    end
    AdminRadZonePanel.instance:addToUIManager()
    AdminRadZonePanel.instance:setVisible(true)
end


function AdminRadZonePanel.isValid()
    return AdminRadZone.isAdm(getPlayer())
end

function AdminRadZonePanel.TogglePanel()
    if not AdminRadZonePanel.isValid() then
        AdminRadZonePanel.ClosePanel()
        return
    end
    if AdminRadZonePanel.instance == nil then
        AdminRadZonePanel.OpenPanel()
    else
        if AdminRadZonePanel.instance:isVisible() then
            AdminRadZonePanel.instance:setVisible(false)
        else
            AdminRadZonePanel.instance:setVisible(true)
        end
    end
end
-----------------------            ---------------------------
function AdminRadZonePanel:new(x, y, width, height)
    local o = ISPanel:new(x, y, width, height)
    setmetatable(o, self)
    self.__index = self
    local col = AdminRadZone.getMarkerColor(1)

    o.borderColor = {r=col.r, g=col.g, b=col.b, a=1}
    o.backgroundColor = {r=0, g=0, b=0, a=0.8}
    o.moveWithMouse = true
    return o
end



function AdminRadZonePanel:initialise()
    ISPanel.initialise(self)
    local isActive = AdminRadZoneData.active or false
    
    local margin = 15
    local spacing = 20
    local labelHeight = 15
    local entryWidth = 100
    local buttonWidth = 80
    local buttonHeight = 25
    local y = margin
  
    self.statusIcon = ISImage:new(25,25, 32, 32, getTexture("media/ui/LootableMaps/map_radiation.png"))
	self.statusIcon:initialise();
	self.statusIcon:instantiate();
	self:addChild(self.statusIcon);


    self.titleLabel = ISLabel:new(margin, y, labelHeight, "Radiation Zone Controller", 1, 1, 1, 1, UIFont.Large, true)
    self:addChild(self.titleLabel)
    y = y + 35
    
    local col1X = margin
    local col2X = 150
    
    self.currentTimeLabel = ISLabel:new(col1X, y, labelHeight, "Current: 0", 0.7, 0.7, 0.7, 1, UIFont.Small, true)
    self:addChild(self.currentTimeLabel)
    
    self.cooldownLabel = ISLabel:new(col2X, y, labelHeight, "Cooldown: " .. tostring(SandboxVars.AdminRadZone.Cooldown or 60) .. "s", 0.7, 0.7, 0.7, 1, UIFont.Small, true)
    self:addChild(self.cooldownLabel)
    y = y + 18
    
    self.durationLabel = ISLabel:new(col1X, y, labelHeight, "Round Duration: " .. tostring(SandboxVars.AdminRadZone.RoundDuration or 60) .. "s", 0.7, 0.7, 0.7, 1, UIFont.Small, true)
    self:addChild(self.durationLabel)
    
    self.shrinkRateLabel = ISLabel:new(col2X, y, labelHeight, "Shrink Rate: ", 0.7, 0.7, 0.7, 1, UIFont.Small, true)
    self:addChild(self.shrinkRateLabel)
    y = y + 18
    
    self.currentRadiusLabel = ISLabel:new(col1X, y, labelHeight, "Current Radius: 0", 0.7, 0.7, 0.7, 1, UIFont.Small, true)
    self:addChild(self.currentRadiusLabel)
    y = y + 35
    
    local cRound = SandboxVars.AdminRadZone.DefaultRounds or 5
    local cRad = SandboxVars.AdminRadZone.DefaultRadius or 50
    if isActive then
        cRound = AdminRadZoneData.rounds
        cRad = AdminRadZoneData.rad
    end
    
    self.roundsLabel = ISLabel:new(margin, y, labelHeight, "Rounds:", 1, 1, 1, 1, UIFont.Medium, true)
    self:addChild(self.roundsLabel)
    
    self.roundsEntry = ISTextEntryBox:new(tostring(cRound), margin + 70, y - 2, entryWidth, 18)
    self.roundsEntry:initialise()
    self.roundsEntry:instantiate()
    self.roundsEntry.onTextChange = AdminRadZonePanel.onRoundsChange
    self:addChild(self.roundsEntry)
    y = y + spacing
    
    self.radiusLabel = ISLabel:new(margin, y, labelHeight, "Radius:", 1, 1, 1, 1, UIFont.Medium, true)
    self:addChild(self.radiusLabel)
    
    self.radiusEntry = ISTextEntryBox:new(tostring(cRad), margin + 70, y - 2, entryWidth, 18)
    self.radiusEntry:initialise()
    self.radiusEntry:instantiate()
    self.radiusEntry.onTextChange = AdminRadZonePanel.onRadiusChange
    self:addChild(self.radiusEntry)
    y = y + spacing
    
    self.totalTimeLabel = ISLabel:new(margin + 180, y - spacing, labelHeight, "Total Duration: 0s", 1, 1, 0.5, 1, UIFont.Medium, true)
    self:addChild(self.totalTimeLabel)
    
    self.xyLabel = ISLabel:new(margin, y, labelHeight, "Coordinates:", 1, 1, 1, 1, UIFont.Medium, true)
    self:addChild(self.xyLabel)
    y = y + 18
    
    self.xyBtn = ISButton:new(margin, y, buttonWidth + 20, buttonHeight, "Select Square", self, AdminRadZonePanel.onXY)
    self.xyBtn.borderColor = {r = 0.41, g = 0.80, b = 1.0, a = 1}
    self.xyBtn:initialise()
    self.xyBtn:instantiate()
    self:addChild(self.xyBtn)
    y = y + buttonHeight + spacing
    
    local buttonY = y
    
    self.startStopBtn = ISButton:new(margin, buttonY, buttonWidth, buttonHeight, "", self, AdminRadZonePanel.onStartStop)
    self.startStopBtn:initialise()
    self.startStopBtn:instantiate()
    self.startStopBtn.borderColor = {r = 1, g = 1, b = 1, a = 0.1}
    
    if isActive then
        self.startStopBtn:setImage(getTexture("media/ui/AdminRadZonePanel_Stop.png"))
    else
        self.startStopBtn:setImage(getTexture("media/ui/AdminRadZonePanel_Start.png"))
    end
    self:addChild(self.startStopBtn)
  

    self.exitBtn = ISButton:new(margin + buttonWidth + 10, buttonY, buttonWidth, buttonHeight, "Exit", self, AdminRadZonePanel.onExit)
    self.exitBtn.borderColor = {r = 1, g = 0, b = 0, a = 0.67}
    self.exitBtn:initialise()
    self.exitBtn:instantiate()
    self:addChild(self.exitBtn)


end


function AdminRadZonePanel:update()
    ISPanel.update(self)
    
    if AdminRadZone.shouldInit() then
        AdminRadZone = AdminRadZone.initData()
    end

    local shrinkRate = 0
    if AdminRadZoneData.rad and AdminRadZoneData.rounds and AdminRadZoneData.rounds > 0 then
        local roundDuration = SandboxVars.AdminRadZone.RoundDuration or 60
        if roundDuration > 0 then
            shrinkRate = AdminRadZoneData.rad / roundDuration
        end
    end
    self.shrinkRateLabel.name = "Shrink Rate: " .. string.format("%.2f", shrinkRate) .. "/s"
    
    local currentRad = AdminRadZoneData.rad or 0
    self.currentRadiusLabel.name = "Radius: " .. tostring(currentRad)


    local pl = getPlayer()
    local x, y = round(pl:getX()),  round(pl:getY())

    self.xyLabel.name = "Coordinates:\nX:" .. tostring(x).."\nY:".. tostring(y)    

    local rounds = tonumber(self.roundsEntry:getText()) or SandboxVars.AdminRadZone.DefaultRounds 
    local cooldown = SandboxVars.AdminRadZone.Cooldown or 60
    local roundDuration = SandboxVars.AdminRadZone.RoundDuration or 60

    local totalTime = (rounds * roundDuration) + (cooldown * rounds)
    self.totalTimeLabel.name = "Total Duration:\n" .. totalTime .. "s (" .. math.floor(totalTime/60) .. "m " .. (totalTime%60) .. "s)"
    AdminRadZoneData.duration = AdminRadZoneData.duration or SandboxVars.AdminRadZone.RoundDuration or 60
    AdminRadZoneData.cooldown = AdminRadZoneData.cooldown or SandboxVars.AdminRadZone.Cooldown or 0
    local currentCd = AdminRadZoneData.duration 
    local col = AdminRadZone.getPanelColor()
    self.currentTimeLabel:setColor(col.r,col.g,col.b)
    self.currentTimeLabel.name = "Round Time: "..tostring(currentCd)

    if AdminRadZone.isRadZoneCooldown() then
        currentCd = AdminRadZoneData.cooldown or 0
        self.currentTimeLabel:setColor(col.r,col.g,col.b)
        self.currentTimeLabel.name = "Cooldown: "..tostring(currentCd)
    end
    self.borderColor = AdminRadZone.getPanelColor()


    self.statusIcon.texture=getTexture("media/ui/LootableMaps/map_radiation.png")
	self.statusIcon.backgroundColor.r = self.borderColor.r;
	self.statusIcon.backgroundColor.g = self.borderColor.g;
	self.statusIcon.backgroundColor.b = self.borderColor.b;
end

function AdminRadZonePanel.onCooldownChange()
    local value = tonumber(AdminRadZonePanel.instance.cooldownLabel:getText())
    if value and value >= 0 then
        AdminRadZone.setCooldown({cooldown = value})
    end
end

function AdminRadZonePanel.onXY()
    local pl = getPlayer()
    local x, y = round(pl:getX()),  round(pl:getY())
    AdminRadZoneData.x = x
    AdminRadZoneData.y = y

    AdminRadZone.doTransmit(AdminRadZoneData)
end

function AdminRadZonePanel.onRoundsChange()
    local value = tonumber(AdminRadZonePanel.instance.roundsEntry:getText())
    if value and value > 0 then
        AdminRadZone.setRounds({rounds = value})
    end
end

function AdminRadZonePanel.onRadiusChange()
    local value = tonumber(AdminRadZonePanel.instance.radiusEntry:getText())
    if value and value > 0 then
        AdminRadZone.setRad({rad = value})
    end
end

function AdminRadZonePanel:onStartStop()
    local isActive = AdminRadZoneData and AdminRadZoneData.active or false
    if isActive then
        AdminRadZone.activate(false)
        self.startStopBtn:setImage(getTexture("media/ui/AdminRadZonePanel_Start.png"))
    else
        self.startStopBtn:setImage(getTexture("media/ui/AdminRadZonePanel_Stop.png"))

        if AdminRadZone.marker then
            AdminRadZone.marker:remove()
            AdminRadZone.marker = nil
        end

        local pl = getPlayer()
        local x, y = AdminRadZoneData.x or -1, AdminRadZoneData.y or -1
        if pl then
            x, y = round(pl:getX()), round(pl:getY())
        end

        if x and y then
            AdminRadZoneData.x = x
            AdminRadZoneData.y = y
        end

        AdminRadZoneData.rad = tonumber(self.radiusEntry:getText()) or (SandboxVars.AdminRadZone.DefaultRadius or 50)
        AdminRadZoneData.rounds = tonumber(self.roundsEntry:getText()) or (SandboxVars.AdminRadZone.DefaultRounds or 5)
        AdminRadZoneData.cooldown = tonumber(self.cooldownLabel:getText()) or (SandboxVars.AdminRadZone.Cooldown or 60)
        AdminRadZoneData.duration = SandboxVars.AdminRadZone.RoundDuration or 60

        AdminRadZone.activate(true)

        --AdminRadZone.save("AdminRadZoneData", AdminRadZoneData)
        AdminRadZone.doTransmit(data)
    end
    print(AdminRadZoneData.active)
end


function AdminRadZonePanel:onExit()
    AdminRadZonePanel.ClosePanel()
end

function AdminRadZonePanel:onClear()
    AdminRadZone.clear()
end

function AdminRadZonePanel:render()
    ISPanel.render(self)
end